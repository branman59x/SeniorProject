
public class Helpers 
{
	public static char[][] compM(char[][] board, int col)
	{
		char[][] b = new char[6][7];
		for(int r = 0; r < board.length; r++)
		{
			for(int c = 0; c < board[0].length; c++)
			{
				b[r][c] = board[r][c];
				//System.out.print(b[r][c]);
			}
			//System.out.println();
		}
		for(int r = b.length - 1; r >= 0; r--)
		{
			if(b[r][col] == '-')
			{
				b[r][col] = 'X';
				break;
			}
		}

		return b;
	}

	public static int block(char[][] board)
	{
		int r = horizontal(board);
		if(r >= 0)
			return r;
		r = vertical(board);
		if(r >= 0)
			return r;
		r = diagonal(board);
		if(r>=0)
			return r;
		return -1;
	}

	public static int horizontal(char[][] board)
	{
		for(int r = board.length-1; r>=0 ; r--)
		{
			for(int c = 0; c < board[0].length; c++)
			{
				//if its on the ends
				if((c + 2) < board[0].length)
				{
					if(board[r][c] == 'O' && board[r][c+1] == 'O' && board[r][c+2] == 'O')
					{
						if((c - 1 >= 0) && board[r][c - 1] == '-' && ((r == 5) || board[r+1][c-1] != '-'))
							return (c - 1);
						if(c + 3 < board[0].length && board[r][c + 3] == '-' && ((r == 5) || board[r + 1][c+3] != '-'))
							return (c + 3);
					}
				}
				if((c + 3) < board[0].length && board[r][c] == 'O' && board[r][c+3] == 'O')
				{
					if(board[r][c + 1] == 'O' &&  board[r][c+2] == '-')
					{
						if(r == 5 || board[r+1][c+2] != '-')
							return c + 2;
					}
					else if(board[r][c+1] == '-' && board[r][c+2] == 'O')
					{
						if(r == 5 || board[r+1][c+1] != '-')
							return c+1;
					}
				}
			}
		}
		return -1;
	}

	public static int vertical(char[][] board)
	{
		for(int r = 5; r  >= 3; r--)
		{
			for(int c = 0; c < board[0].length; c++)
			{
				if(board[r][c] == 'O' && board[r-1][c] == 'O' && board[r-2][c] == 'O' && board[r-3][c] == '-')
					return c;
			}
		}
		return -1;
	}

	public static int diagonal(char[][] board)
	{
		for(int r = board.length-1; r>=0 ; r--)
		{
			for(int c = 0; c < board[0].length; c++)
			{
				//if its on the ends
				if((c + 2) < board[0].length && (r + 2) < board.length)
				{
					if(board[r][c] == 'O' && board[r+1][c+1] == 'O' && board[r+2][c+2] == 'O')
					{
						if((c - 1 >= 0) && (r - 1 >= 0) && board[r-1][c - 1] == '-' && ((r-1 == 5) || board[r][c-1] != '-'))
							return (c - 1);
						if(c + 3 < board[0].length && r + 3 < board.length && board[r+ 3][c + 3] == '-' && ((r+3 == 5) || board[r + 2][c+3] != '-'))
							return (c + 3);
					}
				}

				if((c + 2) < board[0].length && (r - 2) >=0)
				{
					if(board[r][c] == 'O' && board[r-1][c+1] == 'O' && board[r-2][c+2] == 'O')
					{
						if((c - 1 >= 0) && (r + 1 < board.length) && board[r+1][c - 1] == '-' && ((r+1 == 5) || board[r+2][c-1] != '-'))
							return (c - 1);
						if(c + 3 < board[0].length && r - 3 >= 0 && board[r - 3][c + 3] == '-' && ((r-3 == 5) || board[r - 2][c+3] != '-'))
							return (c + 3);
					}
				}

				//in the middle
				if((c + 3) < board[0].length &&(r + 3 < board.length) && board[r][c] == 'O' && board[r+3][c+3] == 'O')
				{
					if(board[r+1][c + 1] == 'O' &&  board[r+2][c+2] == '-')
					{
						if(r + 2 == 5 || board[r+3][c+2] != '-')
							return c + 2;
					}
					else if(board[r+1][c+1] == '-' && board[r+2][c+2] == 'O')
					{
						if(r +1 == 5 || board[r+2][c+1] != '-')
							return c+1;
					}
				}

				if((c + 3) < board[0].length &&(r - 3 >= 0) && board[r][c] == 'O' && board[r-3][c+3] == 'O')
				{
					if(board[r-1][c + 1] == 'O' &&  board[r-2][c+2] == '-')
					{
						if(r - 2 == 5 || board[r-1][c+2] != '-')
							return c + 2;
					}
					else if(board[r-1][c+1] == '-' && board[r-2][c+2] == 'O')
					{
						if(r - 1 == 5 || board[r-1][c+1] != '-')
							return c+1;
					}
				}
			}
		}
		return -1;
	}
}
